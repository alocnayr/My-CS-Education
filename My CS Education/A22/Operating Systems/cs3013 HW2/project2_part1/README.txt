Problem 1 compilation: gcc -g part_1.c -o part_1
Note: the game takes time to run, and we designed the game such that each type of sport will take place within the first minute to help you see the the output more efficiently.

For problem 1, the goal is to create a multi-threaded program to model a park that is able to host three types of players: baseball, football, and soccer. The simulator contain 36 baseball players, 44 football players, and 44 soccer players, while only 18 baseball players, 22 football players, and 22 soccer players can be on the field at once. A special rule of being able to join pair by pair apply to soccer players only. Only one sport is on field at a time, and the number of players on the field should be maximized. For baseball and football, each set of players should have a random but unique period of time dedicated to gaming process, while for soccer players each pair can have their own game time. Before the game start, the players who are ready will be put to sleep.

One of the challenges we encountered in part one was soccer players blocking other players from entering the field. We fixed that by changing the structure of our code, referencing to the dinning philosopher problem discussed in class, asking that once a sport is ready, signal the previous sport to finish up their game and thus let them enter the field. We also encountered problem where too much threads waking up at the same time. To fix that, we added the list of players that are ready but sleeping, and we also added more condition variables, one corresponding to each sport. We also changed the mutex structure from what we originally had to prevent the blocking problem.

If we have more time, we will make the output look more organized and have more statements displaying our solution. We were also thinking about adding more locks to the program, possibly one per sport and separate the file into more sections and make the code easier to read and follow. Another thing to experiment is to change the random sleeping time and random game time so that we can see more variance of output.  