Problem 2 compilation: gcc -g hw1part2.c -o part_2
README:

This problem consists of creating a well optimized runway system that planes can take off from. In it, we simulate the plane taxing, taking off, flying, and landing. There are 6 different parts that simulate this including, idling at terminal, awaiting takeoff, taking off, flying, awaiting landing, and landing. Awaiting takeoff and awaiting landing are where the bulk of the work and the entire objective and purpose of building this simulation lies. This is where we must get a random runway based on the plane size and find some way to allocate locks to each plane trying to enter the critical section, which is trying to allocate each runway segment. During the idle at terminal phase and flying phase, the plane simply sleeps for a random amount of time. We only worry about what happens when trying to take off. Once the plane lands, they can cycle back to the idle at terminal state and do the whole process over and over again for however many times the user wants. The entire trick to the problem and where the hard part lies is certainly making sure that no two planes take off from the same runway back to back where plane “A”  has not cleared runway segment 1 and plane “B” tries to enter runway segment 1. Doing that properly was a lot harder than expected. Not only does that need to be implemented correctly, we also had to account for any possible deadlocks while making the takeoff simulation fairly efficient. In other words, you may achieve mutual exclusion by forming a single file line down the taxiway, but that is horribly inefficient and can certainly cause a lot of deadlocks because if the plane at the front of the line has a problem and can’t takeoff, then every other plane is stuck waiting in line. Making a well optimized, mutually exclusion runway system proved to be very challenging (see problem2_explanation.txt). We also used a seed.txt file to seed the random number generator.